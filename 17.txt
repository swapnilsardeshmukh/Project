LINQ queries can also be designed to perform various aggregation operations on the result set. The
Count() extension method is one such aggregation example. Other possibilities include obtaining an
average, max, min, or sum of values using the Max(), Min(), Average(), or Sum() members of the
Enumerable class. Here is a simple example:
static void AggregateOps()
{
double[] winterTemps = { 2.0, -21.3, 8, -4, 0, 8.2 };
// Various aggregation examples.
Console.WriteLine("Max temp: {0}",

(from t in winterTemps select t).Max());

Console.WriteLine("Min temp: {0}",


(from t in winterTemps select t).Min());
Console.WriteLine("Avarage temp: {0}",
(from t in winterTemps select t).Average());
Console.WriteLine("Sum of all temps: {0}",
(from t in winterTemps select t).Sum());
}